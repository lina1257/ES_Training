
7seg_based_interupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000162  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006cf  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e6  00000000  00000000  0000096b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c9  00000000  00000000  00000f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036b  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012d  00000000  00000000  000015f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  8a:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INT0_init>:
    }
}
void  INT0_init()
{
	//  configure interrupt at Rising Edge 
	MCUCR=(1<<ISC10)|(1<<ISC00);
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	85 bf       	out	0x35, r24	; 53
	// Enable  external interrupt INT0 
	GICR|=(1<<INT0);
  96:	8b b7       	in	r24, 0x3b	; 59
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	8b bf       	out	0x3b, r24	; 59
	// Enable Global interrupt 
	sei();
  9c:	78 94       	sei
  9e:	08 95       	ret

000000a0 <main>:

void  INT0_init();
 uint8 count =0;
  volatile uint8 falg=0;
int main(void)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	2a 97       	sbiw	r28, 0x0a	; 10
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
 // configure high nibble to output
 seven_segment_Direction|=Highr_Nibble;
  b4:	8a b3       	in	r24, 0x1a	; 26
  b6:	80 6f       	ori	r24, 0xF0	; 240
  b8:	8a bb       	out	0x1a, r24	; 26
 //configure Enable pin Direction  E1,E2
 Enable_Pins_DIR|=(1<<E1)|(1<<E2);
  ba:	87 b3       	in	r24, 0x17	; 23
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	87 bb       	out	0x17, r24	; 23
 //configure Enable pin Output  E1,E2
   
    while (1) 
    {   
	    INT0_init();
  c0:	0e 94 49 00 	call	0x92	; 0x92 <INT0_init>
		Enable_Pins_output|=(1<<E1)|(1<<E2);
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	86 60       	ori	r24, 0x06	; 6
  c8:	88 bb       	out	0x18, r24	; 24
		uint8 seve_segment_arr[]={0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90};
  ca:	8a e0       	ldi	r24, 0x0A	; 10
  cc:	e0 e6       	ldi	r30, 0x60	; 96
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	de 01       	movw	r26, r28
  d2:	11 96       	adiw	r26, 0x01	; 1
  d4:	01 90       	ld	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	8a 95       	dec	r24
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x34>
		if(falg==1){
  dc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	71 f7       	brne	.-36     	; 0xc0 <main+0x20>
			seven_segmant_Dispaly=seve_segment_arr[count];
  e4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
  e8:	e1 e0       	ldi	r30, 0x01	; 1
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	ec 0f       	add	r30, r28
  ee:	fd 1f       	adc	r31, r29
  f0:	e8 0f       	add	r30, r24
  f2:	f1 1d       	adc	r31, r1
  f4:	80 81       	ld	r24, Z
  f6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f e3       	ldi	r18, 0x3F	; 63
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x5e>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x68>
 108:	00 00       	nop
			_delay_ms(1000);
			falg=0;
 10a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
			//clear interrupt
			cli();
 10e:	f8 94       	cli
		   }
    }
 110:	d7 cf       	rjmp	.-82     	; 0xc0 <main+0x20>

00000112 <__vector_1>:
	GICR|=(1<<INT0);
	// Enable Global interrupt 
	sei();
}
ISR(INT0_vect)
{  	
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	
	falg=1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	if(count<9)
 128:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
 12c:	89 30       	cpi	r24, 0x09	; 9
 12e:	20 f4       	brcc	.+8      	; 0x138 <__vector_1+0x26>
	{count++;}
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <count>
 136:	02 c0       	rjmp	.+4      	; 0x13c <__vector_1+0x2a>
		
	else{count=0;}
 138:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <count>
 13c:	2f e3       	ldi	r18, 0x3F	; 63
 13e:	8d e0       	ldi	r24, 0x0D	; 13
 140:	93 e0       	ldi	r25, 0x03	; 3
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <__vector_1+0x30>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <__vector_1+0x3a>
 14c:	00 00       	nop
    _delay_ms(1000);
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
