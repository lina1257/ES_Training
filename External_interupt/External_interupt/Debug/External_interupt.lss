
External_interupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000166  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000067e  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e0  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029f  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033f  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009e  00000000  00000000  000014a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001541  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 44 00 	call	0x88	; 0x88 <main>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <external_init>:
			_delay_ms(100);
		}
    }
}
void external_init(){
	MCUCR= (1<<ISC01)|(1<<ISC00);  // sense control
  7c:	83 e0       	ldi	r24, 0x03	; 3
  7e:	85 bf       	out	0x35, r24	; 53
	GICR=(1<<INT0);   // enable for INTO 
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	8b bf       	out	0x3b, r24	; 59
	sei();
  84:	78 94       	sei
  86:	08 95       	ret

00000088 <main>:

void external_init();

int main(void)
{   
	DDRC|=(1<<7);
  88:	a7 9a       	sbi	0x14, 7	; 20
	DDRD|=(1<<3);
  8a:	8b 9a       	sbi	0x11, 3	; 17
	external_init();
  8c:	0e 94 3e 00 	call	0x7c	; 0x7c <external_init>
		PORTD|=(1<<3);
		if(flag==1)
		{
			Toggel_LED();
			// clear interrupt 
			GICR=(1<<INT0);
  90:	90 e4       	ldi	r25, 0x40	; 64
	DDRD|=(1<<3);
	external_init();
    /* Replace with your application code */
    while (1) 
    {   
		PORTD|=(1<<3);
  92:	93 9a       	sbi	0x12, 3	; 18
		if(flag==1)
  94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	d9 f7       	brne	.-10     	; 0x92 <main+0xa>
		{
			Toggel_LED();
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	80 58       	subi	r24, 0x80	; 128
  a0:	85 bb       	out	0x15, r24	; 21
			// clear interrupt 
			GICR=(1<<INT0);
  a2:	9b bf       	out	0x3b, r25	; 59
			flag =0;
  a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	e7 ea       	ldi	r30, 0xA7	; 167
  aa:	f1 e6       	ldi	r31, 0x61	; 97
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x24>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x2a>
  b2:	00 00       	nop
  b4:	ee cf       	rjmp	.-36     	; 0x92 <main+0xa>

000000b6 <__vector_1>:
void external_init(){
	MCUCR= (1<<ISC01)|(1<<ISC00);  // sense control
	GICR=(1<<INT0);   // enable for INTO 
	sei();
}
ISR(INT0_vect){
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
flag =1;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	2f e3       	ldi	r18, 0x3F	; 63
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__vector_1+0x1c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <__vector_1+0x26>
  dc:	00 00       	nop
_delay_ms(1000);
}
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
