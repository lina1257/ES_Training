
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000000da  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009bd  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000788  00000000  00000000  00000bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003de  00000000  00000000  00001375  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001754  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000440  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001c73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#define F_CPU 16000000
#include <avr/delay.h>

int main(void)
{       DDRA|=(1<<0);
  82:	d0 9a       	sbi	0x1a, 0	; 26
		Init_UART();
  84:	0e 94 52 00 	call	0xa4	; 0xa4 <Init_UART>
			  _delay_ms(1000);
		  }*/
		
		 // UART_TransmitteString(" HEllo UART module \n \r");
          //_delay_ms(1000);
		  UART_TransmitteChar('t');
  88:	84 e7       	ldi	r24, 0x74	; 116
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 67 00 	call	0xce	; 0xce <UART_TransmitteChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	83 ed       	ldi	r24, 0xD3	; 211
  94:	90 e3       	ldi	r25, 0x30	; 48
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x14>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x1e>
  a0:	00 00       	nop
  a2:	f2 cf       	rjmp	.-28     	; 0x88 <main+0x6>

000000a4 <Init_UART>:

/* inti UART module */

void Init_UART(void)
 {   uint8 counter ;
	  UBRRL = 103;
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	89 b9       	out	0x09, r24	; 9
	 for (counter= 0; counter<NUMBER_OFUART_MODULE ;counter++)
	 {
	   if ((UART_config[NUMBER_OFUART_MODULE].parity_cfg==NoParity) &&(UART_config[NUMBER_OFUART_MODULE].size_cfg==Bits_8) && (UART_config[NUMBER_OFUART_MODULE].stopBit_cfg==stopBit_1))             
  a8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  ac:	81 11       	cpse	r24, r1
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <Init_UART+0x24>
  b0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	41 f4       	brne	.+16     	; 0xc8 <Init_UART+0x24>
  b8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__data_end+0x1>
  bc:	81 11       	cpse	r24, r1
  be:	04 c0       	rjmp	.+8      	; 0xc8 <Init_UART+0x24>
		 {
		 //8 bit char size, 1 stop_BIT , NO parity
		 UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  c0:	86 e8       	ldi	r24, 0x86	; 134
  c2:	80 bd       	out	0x20, r24	; 32
		 // enable full duplex
		 UCSRB =(1<<TXEN)|(1<<RXEN);  //transmitte and reciver
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	8a b9       	out	0x0a, r24	; 10
	   } 
 } 
 	 // ENABLE FULL DEPLUX TRANSMIITER
 	 Set_Bit(UCSRB,3); // ENABLR TX
  c8:	53 9a       	sbi	0x0a, 3	; 10
 	 Set_Bit(UCSRB,4)  ;// ENABLE RX
  ca:	54 9a       	sbi	0x0a, 4	; 10
  cc:	08 95       	ret

000000ce <UART_TransmitteChar>:
}
/* send char bu UART module */
void UART_TransmitteChar( uint8 data )
 {    
	   while(!(UCSRA&(1<<UDRE)));
  ce:	5d 9b       	sbis	0x0b, 5	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <UART_TransmitteChar>
		UDR = data;
  d2:	8c b9       	out	0x0c, r24	; 12
  d4:	08 95       	ret

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
